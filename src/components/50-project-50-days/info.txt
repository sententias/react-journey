ExpandingCard:
  第一个小项目，在这之前学习了京东的react项目结构和代码规范，webpack打包导入文件时可以通过设置来忽略导入的文件的后缀，但是通过CRA构建的react项目，webpack的配置文件时隐藏的，需要通过指令来将配置文件导出。
  学习了react-router v6的用法，需要通过指令安装对应依赖npm install react-router-dom@6，在根目录使用BrowserRouter元素将根元素包裹（react-router官网有新的使用方式RouterProvider，但是网上没有很多教程应该是新出的，不采用），使用<routers>和<router>标签设置路由导出位置，<Link>标签用于改变路由地址，它会被渲染成a标签。
  通过fetch来在线获取图片资源并加载，本来是使用img标签，但是本项目是伸缩卡片，需要图片根据元素的大小和位置来展示对应的部分，发现img不能实现理想中的效果，于是想到了精灵图的原理，给元素设置背景图。由于使用了styled-components所以不知道怎么设置background的url，查到资料发现styled-components就是react组件，可以传递参数，但是最后采用了内联css样式的方式来实现设置背景图片的url。内联样式不会因为styled-components导入样式而被抛弃。

ProgressStep:
  第二个项目，想使用jsx语法来动态生成step个数，但是有一个问题，就是圆形和进度条应该是交错出现的，由于父元素使用了flex布局，我想通过对进度条设置flex：1属性来填充圆形剩下的部分，但是react渲染的元素只能存在一个根元素，导致不能很好地实现需求，由于再嵌套一层div不够优雅，于是使用了Fragment作为根元素实现了需求。并且由于jsx的返回值也只能存在一个根元素，同样使用了Fragment解决问题。
  由于进度条个数是step个数-1，使用index < stepNumberArrays.length - 1 && (ReactDom)较为优雅地解决了问题。

RotatingNavigationAnimation:
  动画效果很难写，但是基本实现了功能。学习了vh和vw视窗单位，由于父元素使用了flex布局，设置了居中对齐方式，而我的高度设置的超过100vh，导致内容有一部分超过了屏幕范围，设置了align-self解决了问题。
  由于之前使用styled-components是通过HOC高阶组件实现的对元素的包裹，但是这种方式无法对styled传递组件中的state参数，于是改变了使用方法，将styled元素直接作为render的return的根元素。
  值得注意的是给styled组件传递state参数的时候，如果参数是boolean类型，styled组件好像识别不出来，使用toString()方法将boolean类型转为字符串后正常使用。
  
HiddenSarch:
  使用了阿里巴巴矢量组件库，动态导入了link标签，但是出现的是小方格，本来以为是下载字体文件需要时间，在下载字体的时候页面就渲染出来了，尝试添加监听，出现了错误OTS parsing error: invalid sfntVersion: 1080455022，尝试设置定时器，发现不是猜想的问题，尝试使用styled-component全局样式，失败，最后发现是需要两个class类，一个是iconfont，一个是图标的类型。
  还遇到一个问题就是我将input的width设为0后他还是有宽度，后来在控制台发现input有默认的样式padding，以后有问题要多用控制台。

Loading:
  中间做的一个小页面，用于未加载完成时的遮罩，学到了cra创建的项目要读取本地文件时需要放在public文件夹下。

BlurryLoading:
  整了一下git。
  写了一个interval，发现interval的返回值可以写在自己的函数体里，解释是：“intervalId 在 setInterval 调用时被定义，并在回调函数内部可用。由于 JavaScript 的闭包特性，回调函数能够访问定义在其外部的变量（如 intervalId）”。
  使用了styled-components组件的参数传递。

ScrollAnimation:
  学习了hook，使用hook完成开发，之后也将使用hook进行开发。
  学习了IntersectionObserver接口，用于检验元素是否在视窗内。
  学习了keyframes关键字用于定义动画序列。

SplitLandingPage:
  比较简单。
  在styled-components中支持通过&进行选择器的使用。
  
FormInputWave:
  对span标签使用transform动画不生效，bug排查了半天，
  首先怀疑是相对定位和绝对定位的问题，发现不是，然后怀疑label标签的问题，也不是，在控制台测了半天span标签一点不带动弹，
  找到一个解释，将span标签设置为内联行元素解决问题。
  https://www.cnblogs.com/fayin/p/9755590.html
  小技巧:string.split('')能将string变为字符数组。
  思考了一下感觉除了使用input的onfocus和onblur属性，还可以使用useEffect监听ref的value变化实现，不过好像没目前这个清晰

SoundBoard:
  复习了addEventListener。

Dadjokes:
  复习hooks知识点。

EventKeycodes:
  复习hooks知识点。

FaqCollapse:
  学习了grid布局。
  在RotatingNavigationAnimation项目中得到的结论好像有错误，如果写好了ts类型接口还是能识别出来boolean值的。
  动态导入还是不稳定，把阿里巴巴矢量库的字体下下来使用了，摸索了一下使用方法。
  public中的文件和src中的文件的区别是，public中的文件不会被webpack打包。

RandomChoicePicker:
  学习了如何在js中实现sleep(同步等待)
  https://segmentfault.com/a/1190000023490085

AnimatedNavigation:
  CSS动画比较花时间，先把基础效果做出来，后续优化。

IncrementingCounter:
  简单。

DrinkWater:
  稍微复杂一些。
  通过CSS浮动布局和inset实现边框效果，复习grid布局。
  styled-components传参基本掌握。
  由于多层元素嵌套，想起来事件冒泡的知识点并运用。
  后续优化设计表现。

MovieApp:
  animation实现动画效果，比添加类名active好使一些。
  mouseEnter不会冒泡，mouseOver会冒泡

BackgroundSlider:
  貌似动态参数能完全取代attrs设置属性？目前没遇到必须使用attrs设置属性的情况，网上也缺乏相关资料。
  做了很多动画细节,并且解决了很多问题。
  1.布局定位中，如果设置了relative或者absolute属性，那么他们的位置计算是相对于第一个非static父元素，这两个属性的区别只在于会不会占用文档的标准流。
  2.想实现镂空的模糊效果，filter: blur()会对所有子元素运用,无法实现镂空 => 对父元素container设置伪元素和背景，运用blur进行模糊，对container的子元素content设置背景，不模糊。
  3.对子元素content设置box-shadow模拟遮罩。
  4.设置父子元素的background-position:center,background-size: 100vw 100vh;对齐背景。
  5.动画只在渲染完成后执行一次，切换背景不会再执行动画 => 
    由于 React 使用虚拟 DOM 来优化渲染性能。当组件的状态或属性变化时，React 会首先创建一个新的虚拟 DOM 树，然后与旧的虚拟 DOM 树进行比较，找出实际需要更新的部分。React 通过差异化算法（reconciliation algorithm）计算出需要更新的部分，并将这些变化应用到实际的 DOM 中，从而提高渲染效率。
    并且动画只会在元素创建的时候执行一次(未设定重复次数时)。
    于是通过设置key使react重新渲染styled-components组件。

ThemeClock:
  学习了DateTimeFormat用于格式化时间戳。
  学习了如何在react中使用CSS变量:
    1. CSS 变量允许您在 CSS 中定义可以重用的值。这些变量以 -- 开头，可以在 CSS 中被引用和更新
    2.通过使用 TypeScript 的类型断言 as CSSProperties来防止 TS 报错。TypeScript 的类型系统不直接支持自定义 CSS 属性，因此需要使用类型断言来告诉 TypeScript，这个对象也符合 CSSProperties 的接口。CSSProperties 是 React 内置的类型，用于描述内联样式对象的标准属性。
    3.TypeScript 允许通过 声明合并 的方式扩展接口。这意味着如果在不同的地方声明了相同的接口，它们会自动合并，所有的属性和方法都会在最终的接口中体现。
    4.通过在css中使用var(自定义变量)的形式使用CSS变量
    
ButtonRippleEffect:
  涟漪的动画效果
  https://www.cnblogs.com/cs-whut/p/13551757.html
  排查出一个bug，我对于radiate类设置的transform不生效，后来发现是写的动画中也包含transform导致的，解决办法是将选择器中的transform写进动画里
  <del>试图实现一个功能，每次点击的时候就生成三个页面元素，规定时间到了就移除，本来设想是通过对象数组实现，就是将待渲染的元素压入数组，再实时渲染数组，但无法实现功能</del>
  <del>后来尝试通过类似线程池的方式，设置一个激活队列和等待队列，再根据激活队列的元素个数动态渲染页面元素，但是每次添加元素到激活队列中都会导致页面重新渲染，之前已经播放过动画的元素会再次播放动画。</del>
  难怪动画效果不符合预期，本来就算是重新渲染了之前的类，由于样式是一样的他们只会重叠到一起看不出来，原来是我没设置key，react的虚拟DOM特性导致的。
  
DragNDrop:
  学习了拖拽库ReactDnd，这个库的官方文档写的很烂。或许可以写一篇博客。
  报错Expected drop context，是因为reactDnd的<DndProvider>组件包裹错误。
  复习了react hooks中不同组件之间props的传递方法。
  复习了CSS属性选择器。
  复习了React Hook插槽。

DrawingApp:
  画出来的线段不跟手，尝试自己指定x,y的坐标，发现x,y坐标很小的情况下线却在偏右下,在canvas的左上角画图，发现线段有偏移
  发现问题在于我通过vw和vh动态设置了canvas元素的宽高，但canvas实际的宽高却没有动态改变,将canvas的width和height设置为他自己的clientHeight和clientWidth解决问题
  console.dir()能够对HTMLElement元素的属性进行展开。

KineticLoader:
  注意动画顺序，一开始把animation-delay写在前一个元素上导致动画很怪。

ContentPlaceholder:
  完成了基本效果但不够满意，思考怎么让一个遮罩组件能完全遮盖父元素且不需要使用relative这种定位。

StickyNavigation:
  主要是CSS的使用。

DoubleVerticalSlider:
  如果想让伪元素显示在父元素的下方，设置伪元素z-index为-1。
  https://fatesinger.com/100258
    同一个层叠上下文里面, 层叠顺序从后向前依次是: 背景和边框、负z-index、块级盒、浮动盒、行内盒、z-index:0、正z-index.
    伪元素相当于子元素，也就是包含在元素内的，二者不在同一个层叠上下文中。
    如果想实现层叠效果，需要元素和对应的伪元素在同一层叠上下文中，所以不能让元素创建层叠上下文。以下情况会创建层叠上下文

    即便是 position 不为 static 的元素, 如果没有指定一个非 auto 值的 z-index, 该元素就不会建立一个层叠上下文。
    元素的transform值不是none。

ToastNotification:
  复习了fixed布局。
  复习了TS如何限制指定字符串为参数。
  在react中使用let定义的变量，改变变量可能出现变量实际更新不及时的现象。
  考虑将toast封装为一个函数方便调用而不是一个组件。
    第一版直接将组件通过ReactDOM.createroot.render的方法将组件渲染进去，导致原本渲染的组件全部丢失。
      查找了资料发现react不支持追加渲染，也就是说如果我想使用render的话，我就需要将原本的render获取到并渲染，那这和Provier包裹好像没什么区别。
    思考了一下，也就是说如果我想实现这个Toast功能，有以下方法:
      1.使用Provider提供上下文支持 => 不想采用，这样太重了，不能随插随用。
      2.使用<Toast>组件，并且将Toast组件的方法暴露出来以供调用。
      3.使用原生js实现。
    还是Toast组件比较适合。


GithubProfiles:
  在React开发环境中，如果使用了严格模式，useEffect会执行两次。
  学习了axios，复习了promise。

DoubleClickHeart:
  和之前的涟漪按钮一样。
  尝试优化为激活后不跟着鼠标走...

AutoTextEffect:
  定时器的基础运用。
  复习了input元素。

PasswordGenerator:
  双向绑定（value + onChange）。
  navigator.clipboard.writeText写入剪切板。

GoodCheapFast:
  主要难点在于滑动开关的设计。

NotesApp:
  决定以后写代码还是加上分号，因为cra创建的原生代码都是加了分号的，就是用了一段时间无分号后感觉有分号风格有点丑。
  注意一下map的key，是唯一标识符，应该在重新渲染时保持不变。
  可以使用`margin-right: auto;`实现flex布局下类似justify-self的操作。

AnimatedCountdown:
  功能实现了，但代码写的很不优雅，后期想办法优化一下。

ImageCarousel:
  考虑到不能让用户手动切换图片后，由于定时器时间到了又导致图片切换，使用useEffect监听activeIndex属性，保证每次切换图片后都重新设置定时器。

Hoverboard:
  memo和PureComponent类似，只有在组件的props改变时才会重新渲染组件。
  usememo则主要用于减少函数组件内重复的复杂计算，和vue的computed类似，useMemo 依赖于传递给它的依赖数组，当依赖项发生变化时，它会重新计算缓存值。

Pokedex:
  复习了axios。
  研究了pokeapi的官方api文档https://pokeapi.co/docs/v2。
  目前有个问题是如果图片没加载完成，那么一个元素都不会渲染，后期想办法改正，暂且先使用本地图片代替。

MobileTabNavigation:
  使用transform实现。
  
PasswordStrengthBackground:
  使用定位布局将一个div作为背景，通过conic-gradient径向渐变实现类似进度条的效果。
  由于filter:blur()对所有子元素也生效，通过伪元素来实现背景模糊的效果，background: inherit;可以直接继承父元素的背景。

3dBackgroundBoxes:
  暂时没实现，由于要和精灵图一样定位背景元素的位置，有点麻烦。

VerifyAccountUi:
  使用inputtype=text和maxlength限制每个框只能输入一个字符，通过双向绑定和正则表达式保证输入框只能输入数字，
  并且当输入完数字后会自动focus到下一个输入框中，backspace逻辑一致。

LiveUserFilter:
  使用filter过滤在线用户，值得注意的是，需要保留原用户的数据，不能使用上一次的数据进行过滤，否则原本用户数据会丢失。

FeedbackUiFesign:
  只实现了本组件间的数据传递，其实也可以通过props或者其他方法进行组件间的数据传递。

CustomRangeSlider:
  通过定位布局实现滑动条和上方文本对应。

NetflixMobileNavigation:
  为了实现先进后出的动画效果，给元素自身和active类设置相反的duration-delay时间，由于进入时存在active类名，移出时不存在active类名，实现需求的动画效果。

QuizApp:
  通过动态渲染实现。

TestimonialBoxSwitcher:
  如果CSS动画设置为infinite，虽然和js定时器的DRURATION一致，但由于两者分开计时，有可能出现不同步的情况，因此每次index更新时重新渲染progress-bar，解决问题

RandomImageGenerator：
  通过调用接口实现。

TodoList:
  CSS写了很久，但还是不好看。
  鼠标左键点击事件和右键点击事件不同。

InsectCatchGame:
  暂时没实现，思路很简单，就是给i元素一个随机的transform，并且onclick的时候移除自身，增加i元素的数量。
